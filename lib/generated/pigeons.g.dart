// Autogenerated from Pigeon (v16.0.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum DeviceType {
  appleWatch,
  ouras,
}

enum FirmwareUpdateStatus {
  updating,
  error,
  done,
}

class TimeSeriesData {
  TimeSeriesData({
    required this.timestamp,
    required this.data,
  });

  int timestamp;

  int data;

  Object encode() {
    return <Object?>[
      timestamp,
      data,
    ];
  }

  static TimeSeriesData decode(Object result) {
    result as List<Object?>;
    return TimeSeriesData(
      timestamp: result[0]! as int,
      data: result[1]! as int,
    );
  }
}

class FirmwareStatusResponse {
  FirmwareStatusResponse({
    required this.status,
    required this.value,
  });

  FirmwareUpdateStatus status;

  String value;

  Object encode() {
    return <Object?>[
      status.index,
      value,
    ];
  }

  static FirmwareStatusResponse decode(Object result) {
    result as List<Object?>;
    return FirmwareStatusResponse(
      status: FirmwareUpdateStatus.values[result[0]! as int],
      value: result[1]! as String,
    );
  }
}

class _HealthDataHostApiCodec extends StandardMessageCodec {
  const _HealthDataHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is TimeSeriesData) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return TimeSeriesData.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class HealthDataHostApi {
  /// Constructor for [HealthDataHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  HealthDataHostApi({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _HealthDataHostApiCodec();

  Future<List<TimeSeriesData?>?> getHeartRate(int from, int to) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.pigeon_poc.HealthDataHostApi.getHeartRate';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[from, to]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)?.cast<TimeSeriesData?>();
    }
  }
}

class _HealthDataFlutterApiCodec extends StandardMessageCodec {
  const _HealthDataFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is FirmwareStatusResponse) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is TimeSeriesData) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return FirmwareStatusResponse.decode(readValue(buffer)!);
      case 129: 
        return TimeSeriesData.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class HealthDataFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _HealthDataFlutterApiCodec();

  void onHeartRateAdded(TimeSeriesData data);

  void onStepsAdded(TimeSeriesData data);

  void onFirmwareStatusUpdate(FirmwareStatusResponse data);

  static void setup(HealthDataFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.pigeon_poc.HealthDataFlutterApi.onHeartRateAdded', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.pigeon_poc.HealthDataFlutterApi.onHeartRateAdded was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final TimeSeriesData? arg_data = (args[0] as TimeSeriesData?);
          assert(arg_data != null,
              'Argument for dev.flutter.pigeon.pigeon_poc.HealthDataFlutterApi.onHeartRateAdded was null, expected non-null TimeSeriesData.');
          try {
            api.onHeartRateAdded(arg_data!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.pigeon_poc.HealthDataFlutterApi.onStepsAdded', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.pigeon_poc.HealthDataFlutterApi.onStepsAdded was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final TimeSeriesData? arg_data = (args[0] as TimeSeriesData?);
          assert(arg_data != null,
              'Argument for dev.flutter.pigeon.pigeon_poc.HealthDataFlutterApi.onStepsAdded was null, expected non-null TimeSeriesData.');
          try {
            api.onStepsAdded(arg_data!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.pigeon_poc.HealthDataFlutterApi.onFirmwareStatusUpdate', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.pigeon_poc.HealthDataFlutterApi.onFirmwareStatusUpdate was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final FirmwareStatusResponse? arg_data = (args[0] as FirmwareStatusResponse?);
          assert(arg_data != null,
              'Argument for dev.flutter.pigeon.pigeon_poc.HealthDataFlutterApi.onFirmwareStatusUpdate was null, expected non-null FirmwareStatusResponse.');
          try {
            api.onFirmwareStatusUpdate(arg_data!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
